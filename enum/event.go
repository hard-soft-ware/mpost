package enum

/* This file is automatically generated */

type EventType byte

const (
	Event_Begin            EventType = 0
	EventConnected         EventType = 1
	EventEscrow            EventType = 2
	EventPUPEscrow         EventType = 3
	EventStacked           EventType = 4
	EventReturned          EventType = 5
	EventRejected          EventType = 6
	EventCheated           EventType = 7
	EventStackerFull       EventType = 8
	EventCalibrateStart    EventType = 9
	EventCalibrateProgress EventType = 10
	EventCalibrateFinish   EventType = 11
	EventDownloadStart     EventType = 12
	EventDownloadRestart   EventType = 13
	EventDownloadProgress  EventType = 14
	EventDownloadFinish    EventType = 15
	EventPauseDetected     EventType = 16
	EventPauseCleared      EventType = 17
	EventStallDetected     EventType = 18
	EventStallCleared      EventType = 19
	EventJamDetected       EventType = 20
	EventJamCleared        EventType = 21
	EventPowerUp           EventType = 22
	EventInvalidCommand    EventType = 23
	EventCashBoxAttached   EventType = 24
	EventCashBoxRemoved    EventType = 25
	EventDisconnected      EventType = 26
	Event_End              EventType = 27
)

const (
	EventText_Begin            = "_Begin"
	EventTextConnected         = "Connected"
	EventTextEscrow            = "Escrow"
	EventTextPUPEscrow         = "PUPEscrow"
	EventTextStacked           = "Stacked"
	EventTextReturned          = "Returned"
	EventTextRejected          = "Rejected"
	EventTextCheated           = "Cheated"
	EventTextStackerFull       = "StackerFull"
	EventTextCalibrateStart    = "CalibrateStart"
	EventTextCalibrateProgress = "CalibrateProgress"
	EventTextCalibrateFinish   = "CalibrateFinish"
	EventTextDownloadStart     = "DownloadStart"
	EventTextDownloadRestart   = "DownloadRestart"
	EventTextDownloadProgress  = "DownloadProgress"
	EventTextDownloadFinish    = "DownloadFinish"
	EventTextPauseDetected     = "PauseDetected"
	EventTextPauseCleared      = "PauseCleared"
	EventTextStallDetected     = "StallDetected"
	EventTextStallCleared      = "StallCleared"
	EventTextJamDetected       = "JamDetected"
	EventTextJamCleared        = "JamCleared"
	EventTextPowerUp           = "PowerUp"
	EventTextInvalidCommand    = "InvalidCommand"
	EventTextCashBoxAttached   = "CashBoxAttached"
	EventTextCashBoxRemoved    = "CashBoxRemoved"
	EventTextDisconnected      = "Disconnected"
	EventText_End              = "_End"
)

var EventMap = map[EventType]string{
	Event_Begin:            EventText_Begin,
	EventConnected:         EventTextConnected,
	EventEscrow:            EventTextEscrow,
	EventPUPEscrow:         EventTextPUPEscrow,
	EventStacked:           EventTextStacked,
	EventReturned:          EventTextReturned,
	EventRejected:          EventTextRejected,
	EventCheated:           EventTextCheated,
	EventStackerFull:       EventTextStackerFull,
	EventCalibrateStart:    EventTextCalibrateStart,
	EventCalibrateProgress: EventTextCalibrateProgress,
	EventCalibrateFinish:   EventTextCalibrateFinish,
	EventDownloadStart:     EventTextDownloadStart,
	EventDownloadRestart:   EventTextDownloadRestart,
	EventDownloadProgress:  EventTextDownloadProgress,
	EventDownloadFinish:    EventTextDownloadFinish,
	EventPauseDetected:     EventTextPauseDetected,
	EventPauseCleared:      EventTextPauseCleared,
	EventStallDetected:     EventTextStallDetected,
	EventStallCleared:      EventTextStallCleared,
	EventJamDetected:       EventTextJamDetected,
	EventJamCleared:        EventTextJamCleared,
	EventPowerUp:           EventTextPowerUp,
	EventInvalidCommand:    EventTextInvalidCommand,
	EventCashBoxAttached:   EventTextCashBoxAttached,
	EventCashBoxRemoved:    EventTextCashBoxRemoved,
	EventDisconnected:      EventTextDisconnected,
	Event_End:              EventText_End,
}

func (obj EventType) String() string {
	val, ok := EventMap[obj]
	if ok {
		return val
	}
	return "Unknown EventType"
}
